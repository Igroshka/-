# -*- coding: utf-8 -*-

__id__ = "media_uploader_pg"
__name__ = "MediaUPL"
__description__ = "–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É' –≤ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ upl.yufic.ru.\n\nAdds a 'Get link' button to the message menu to upload media to upl.yufic.ru."
__version__ = "1.1.0"
__author__ = "@exteraRooni & @PluginIDEbot"
__icon__ = "sPluginIDE/20"
__min_version__ = "11.12.0"

import os
import json
import time
import requests
import traceback
import threading
from typing import Any, Dict, Optional

from base_plugin import BasePlugin, MenuItemData, MenuItemType
from client_utils import get_last_fragment
from android_utils import run_on_ui_thread, log
from ui.alert import AlertDialogBuilder
from ui.bulletin import BulletinHelper
from ui.settings import Header, Input, Divider

from org.telegram.messenger import FileLoader, LocaleController, UserConfig, AndroidUtilities, ApplicationLoader
from android.content import Context, ClipData, ClipboardManager

# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ PluginGRT - @PluginIDEbot

class MediaUplPlugin(BasePlugin):
    """
    –ü–ª–∞–≥–∏–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ upl.yufic.ru —á–µ—Ä–µ–∑ API.
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    def on_plugin_load(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞."""
        s = self._get_strings()
        self.add_menu_item(MenuItemData(
            menu_type=MenuItemType.MESSAGE_CONTEXT_MENU,
            text=s["menu_item_text"],
            on_click=self._handle_menu_click,
            icon="msg_link",
            # –ö–Ω–æ–ø–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            condition='message.isDocument() || message.isPhoto()'
        ))

    def _get_strings(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏."""
        lang = LocaleController.getInstance().getCurrentLocale().getLanguage()
        is_ru = lang.startswith('ru')

        return {
            "menu_item_text": "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É" if is_ru else "Get link",
            "no_api_key": "üíº **API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.**\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –ø–ª–∞–≥–∏–Ω–µ." if is_ru else "üíº **API key not configured.**\nSet it up in the plugin settings.",
            "loading_dialog_title": "–ó–∞–≥—Ä—É–∑–∫–∞..." if is_ru else "Uploading...",
            "success_dialog_title": "‚úÖ –£—Å–ø–µ—à–Ω–æ" if is_ru else "‚úÖ Success",
            "error_dialog_title": "‚ùå –û—à–∏–±–∫–∞" if is_ru else "‚ùå Error",
            "copy_button": "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" if is_ru else "Copy",
            "ok_button": "OK",
            "link_copied": "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞" if is_ru else "Link copied",
            "error_copied": "–û—à–∏–±–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞" if is_ru else "Error copied",
            "error_401": "üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401).\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞." if is_ru else "üîë Authorization Error (401).\nPlease check your API key.",
            "config_api_key_title": "API –∫–ª—é—á" if is_ru else "API Key",
            "config_api_key_subtext": "–í–∞—à API –∫–ª—é—á –æ—Ç —Ö–æ—Å—Ç–∏–Ω–≥–∞ upl.yufic.ru" if is_ru else "Your API key from upl.yufic.ru hosting",
            "settings_header": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MediaUPL" if is_ru else "MediaUPL Settings",
            "error_file_not_found": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ." if is_ru else "File not found on device. Download it first."
        }

    def create_settings(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞."""
        s = self._get_strings()
        return [
            Header(s["settings_header"]),
            Input(
                key="api_key",
                text=s["config_api_key_title"],
                subtext=s["config_api_key_subtext"],
                icon="msg_secret"
            ),
            Divider("–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ @RnPlugins")
        ]

    def _handle_menu_click(self, context: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é."""
        s = self._get_strings()
        api_key = self.get_setting("api_key")

        if not api_key:
            run_on_ui_thread(lambda: BulletinHelper.show_error(s["no_api_key"]))
            return
        
        message = context.get("message")
        fragment = get_last_fragment()
        activity = fragment.getParentActivity() if fragment else None

        if not message or not activity:
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        loading_dialog = AlertDialogBuilder(activity, AlertDialogBuilder.ALERT_TYPE_LOADING)
        loading_dialog.set_title(s["loading_dialog_title"])
        loading_dialog.set_cancelable(False)
        loading_dialog.show()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        # #>^_^<#
        pg_upload_thread = threading.Thread(
            target=self._upload_task,
            args=(message, api_key, activity, loading_dialog),
            daemon=True
        )
        pg_upload_thread.start()

    def _get_file_path(self, account: int, message: Any) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–∂–∏–¥–∞—è –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏."""
        file_loader = FileLoader.getInstance(account)
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        file_path_obj = file_loader.getPathToMessage(message.messageOwner)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if not file_path_obj or not os.path.exists(file_path_obj.toString()):
            attach = None
            if message.isDocument():
                attach = message.getDocument()
            elif message.isPhoto():
                photo = message.getPhoto()
                if photo and photo.sizes:
                    biggest_size = max(photo.sizes, key=lambda s: getattr(s, 'w', 0) * getattr(s, 'h', 0))
                    attach = biggest_size.location
            
            if attach:
                file_loader.loadFile(attach, message, None, FileLoader.PRIORITY_HIGH, 1)

        # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–¥–æ 30 —Å–µ–∫—É–Ω–¥)
        for _ in range(300): # 300 * 0.1s = 30s
            # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            current_path_obj = file_loader.getPathToMessage(message.messageOwner)
            if current_path_obj and os.path.exists(current_path_obj.toString()):
                return current_path_obj.toString()
            time.sleep(0.1)
        
        return None

    def _upload_task(self, message: Any, api_key: str, activity: Any, loading_dialog: AlertDialogBuilder):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
        s = self._get_strings()
        account = UserConfig.selectedAccount
        try:
            file_path = self._get_file_path(account, message)
            if not file_path:
                run_on_ui_thread(loading_dialog.dismiss)
                self._show_result_dialog(activity, s["error_dialog_title"], s["error_file_not_found"])
                return

            original_filename, mime_type = "upload.bin", "application/octet-stream"
            if message.isDocument() and (doc := message.getDocument()):
                original_filename = getattr(doc, 'file_name_fixed', original_filename)
                mime_type = getattr(doc, 'mime_type', mime_type)
            elif message.isPhoto():
                original_filename, mime_type = f"photo_{message.getId()}.jpg", "image/jpeg"
            
            with open(file_path, "rb") as f: media_bytes = f.read()

            files = {'image': (original_filename, media_bytes, mime_type)}
            url, headers = "https://upl.yufic.ru/api/upload.php", {"Authorization": f"Bearer {api_key}"}

            response = requests.post(url, headers=headers, files=files, timeout=60)
            
            run_on_ui_thread(loading_dialog.dismiss)

            if response.status_code == 401:
                self._show_result_dialog(activity, s["error_dialog_title"], s["error_401"])
                return
            
            response.raise_for_status()
            
            result_json = response.json()
            link = result_json.get("url")

            if link:
                self._show_result_dialog(activity, s["success_dialog_title"], link)
            else:
                error_msg = result_json.get("error", str(result_json))
                self._show_result_dialog(activity, s["error_dialog_title"], error_msg)

        except requests.exceptions.HTTPError as e:
            error_details = f"–ö–æ–¥: {e.response.status_code}\n–û—Ç–≤–µ—Ç: {e.response.text}"
            log(f"HTTP Error: {error_details}")
            run_on_ui_thread(loading_dialog.dismiss)
            self._show_result_dialog(activity, s["error_dialog_title"], error_details)
        except Exception as e:
            log(f"Upload task failed: {traceback.format_exc()}")
            run_on_ui_thread(loading_dialog.dismiss)
            self._show_result_dialog(activity, s["error_dialog_title"], f"{type(e).__name__}")
    
    def _show_result_dialog(self, activity: Any, title: str, text: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
        s = self._get_strings()
        
        def copy_action(builder, which):
            try:
                # AndroidUtilities.addToClipboard(text) –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–ª–∞–≥–∏–Ω–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥
                context = ApplicationLoader.applicationContext
                clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE)
                clip = ClipData.newPlainText("MediaUPL", text)
                clipboard.setPrimaryClip(clip)
                
                is_error = title == s["error_dialog_title"]
                BulletinHelper.show_info(s["error_copied"] if is_error else s["link_copied"])
            except Exception as e:
                log(f"Copy failed: {e}")

        def show_dialog():
            builder = AlertDialogBuilder(activity)
            builder.set_title(title)
            builder.set_message(text)
            builder.set_positive_button(s["ok_button"], lambda b, w: b.dismiss())
            builder.set_negative_button(s["copy_button"], copy_action)
            builder.set_cancelable(False)
            builder.set_canceled_on_touch_outside(False)
            builder.show()

        run_on_ui_thread(show_dialog)