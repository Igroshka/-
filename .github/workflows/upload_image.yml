name: Upload Image

on:
  workflow_dispatch:
    inputs:
      image_data:
        description: 'Ссылка на изображение, base64 строка или байты'
        required: true
      fixed:
        description: 'Установите "true", чтобы сохранить изображение навсегда'
        required: false
        default: 'false'

jobs:
  upload_image:
    runs-on: ubuntu-latest
    steps:
      - name: Проверка репозитория
        uses: actions/checkout@v3

      - name: Установка зависимостей
        run: |
          sudo apt-get update
          sudo apt-get install -y coreutils

      - name: Определение типа изображения и загрузка/декодирование
        id: determine_image_type
        run: |
          if [[ "${{ github.event.inputs.image_data }}" =~ ^http.* ]]; then
            echo "::set-output name=image_type::url"
            wget "${{ github.event.inputs.image_data }}" -O image
          elif [[ "${{ github.event.inputs.image_data }}" =~ ^data:image.* ]]; then
            echo "::set-output name=image_type::base64"
            echo "${{ github.event.inputs.image_data }}" | base64 -d > image
          else
            echo "::set-output name=image_type::bytes"
            echo "${{ github.event.inputs.image_data }}" > image
          fi

      - name: Генерация имени файла
        id: generate_filename
        run: |
          filename=$(date +%Y.%m.%d_%H:%M:%S)_$(openssl rand -base64 10 | tr -dc 'a-zA-Z0-9' | head -c 10) # Оптимизировано
          # Упрощенное определение расширения (менее надежно):
          case $(head -c 4 image | od -An -tx1 | tr -d ' ') in
            89504e47) ext="png";;
            ffd8ffe*) ext="jpg" ;; # Поддержка jpeg и jpg
            47494638) ext="gif";;
            *        ) ext="unknown";; # Обработка неизвестных типов
          esac
          echo "::set-output name=filename::$filename.$ext"

      - name: Определение пути загрузки
        id: upload_path
        run: |
          if [[ "${{ github.event.inputs.fixed }}" == "true" ]]; then
            path="fixed"
          else
            path="uploads"
          fi
          echo "::set-output name=path::$path"
          mkdir -p "$path"
          UPLOAD_PATH="$path" >> $GITHUB_ENV # Сохраняем путь в переменную окружения
          
      - name: Проверка существующего файла и переименование, если нужно
        id: check_existing
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.fixed }}" == "true" ]]; then
            UPLOAD_PATH="fixed" # Устанавливаем UPLOAD_PATH здесь
          else
            UPLOAD_PATH="uploads" # Устанавливаем UPLOAD_PATH здесь
          fi
          mkdir -p "$UPLOAD_PATH"
          i=1
          filename="${{ steps.generate_filename.outputs.filename }}"
          while [ -f "$UPLOAD_PATH/$filename" ]; do
            filename_without_ext=$(echo "$filename" | cut -d '.' -f 1)
            ext=$(echo "$filename" | cut -d '.' -f 2-)
            filename="${filename_without_ext}($i).$ext"
            i=$((i+1))
          done
          echo "final_filename=$filename" >> $GITHUB_OUTPUT #  Используем GITHUB_OUTPUT
          mv image "$UPLOAD_PATH/$filename"
      
      - name: Коммит и пуш изменений
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Загрузка изображения ${{ steps.check_existing.outputs.final_filename }}"
          file_pattern: "${{ steps.upload_path.outputs.path }}/*" # Кавычки для обработки пробелов


      - name: Установка выходной переменной
        id: set_output
        run: |
           if [[ "${{ github.event.inputs.fixed }}" == "true" ]]; then
            UPLOAD_PATH="fixed" # Устанавливаем UPLOAD_PATH здесь
           else
            UPLOAD_PATH="uploads" # Устанавливаем UPLOAD_PATH здесь
           fi
           echo "image_url=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/$UPLOAD_PATH/${{ steps.check_existing.outputs.final_filename }}" >> $GITHUB_OUTPUT  # Используем GITHUB_OUTPUT
          
      
      - name: Возврат URL
        run: echo "${{ steps.set_output.outputs.image_url }}"
